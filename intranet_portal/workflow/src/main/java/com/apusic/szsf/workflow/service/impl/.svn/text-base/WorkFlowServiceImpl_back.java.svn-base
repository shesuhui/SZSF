package com.apusic.webservice.service.impl;

import java.io.File;
import java.io.StringReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;







import com.apusic.webservice.axis.sfj.OaWorkFlow;
import com.apusic.webservice.axis.sfj.OaWorkFlowLocator;
import com.apusic.webservice.axis.sfj.OaWorkFlowSoap;
import com.apusic.webservice.model.FlowInfo;
import com.apusic.webservice.model.Info;
import com.apusic.webservice.service.WorkFlowService;

public class WorkFlowServiceImpl_back{

	// 模拟数据测试
	
	public FlowInfo getFlowInfoTest(String userAccount, int type, int pageNum, int pageSize, String categoryIds ,String formsetIds ) {
		FlowInfo flowInfo = new FlowInfo();
		List<Info> infoList = new ArrayList();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
		try {

			/*String flowWService_address = "http://10.40.33.20:9080/flowService/services/flowWService";
			OaWorkFlow flow = new OaWorkFlowLocator(flowWService_address);
			OaWorkFlowSoap flowService = flow.getflowWService();
			String resultXml = flowService.getWaittingInsts("wenf", 2, 1, 6, "", "");
			System.out.println(resultXml);
			
			DocumentBuilderFactory factory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse(new InputSource(new StringReader(resultXml)));
			Element root = document.getDocumentElement();
			System.out.println(root.getNodeName());*/

			DocumentBuilderFactory factory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document=null;
			System.out.println("typesss="+type);
			if(type==1)
			{
				File file =new File( this.getClass().getClassLoader().getResource("test1.xml").getPath());
				System.out.println("111="+ this.getClass().getClassLoader().getResource("test1.xml").getPath());
				System.out.println("222="+ this.getClass().getClassLoader().getResource("/").getPath());
				System.out.println("333="+ this.getClass().getClassLoader().getResource("").getPath());
				document= builder.parse(file);

			}else if(type==2){
			
				File file =new File( this.getClass().getClassLoader().getResource("test4.xml").getPath());
				document= builder.parse(file);
			
			}
			
			Element root = document.getDocumentElement();
			System.out.println(root.getNodeName());
			
			//获取ResponseCode节点信息
			NodeList resList = root.getElementsByTagName("ResponseCode");
			Element ResponseCode = (Element)resList.item(0);
			int responseCode = Integer.parseInt(ResponseCode.getTextContent());
			flowInfo.setResponseCode(responseCode);
			
			//获取ResponseText节点信息
			resList = root.getElementsByTagName("ResponseText");
			Element ResponseText = (Element)resList.item(0);
			flowInfo.setResponseText(ResponseText.getTextContent());
			
			if(responseCode!=0)
			{
				// 得到responseData节点
				NodeList nodeList = root.getElementsByTagName("ResponseData");
				Element ResponseData = (Element) nodeList.item(0);

				// 得到info-list节点
				NodeList info_lList = ResponseData
						.getElementsByTagName("info-list");
				Element info_listElement = (Element) info_lList.item(0);

				// 得到info-list的子节点
				NodeList info_ListChild = info_listElement.getChildNodes();

				// 遍历info-list的子节点并把页面信息存入PageInfo类中
				for (int i = 0; i < info_ListChild.getLength(); i++) {
					Node node = info_ListChild.item(i);
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element personNode = (Element) node;
						if (personNode.getNodeName().equals("total-page")) {
							flowInfo.setTotalPage(Integer.parseInt(personNode.getTextContent()));
						} else if (personNode.getNodeName().equals(
								"total-record")) {
							flowInfo.setTotalRecord(Integer.parseInt(personNode
									.getTextContent()));
						} else if (personNode.getNodeName().equals("page-num")) {
							flowInfo.setPageNum(Integer.parseInt(personNode
									.getTextContent()));
						} else if (personNode.getNodeName().equals("page-size")) {
							flowInfo.setPageSize(Integer.parseInt(personNode.getTextContent()));
						}
					}
				}

				
				// 读取<info>，并存入pageInfo
				NodeList infoNodeList = info_listElement
						.getElementsByTagName("info");
				for (int j = 0; j < infoNodeList.getLength(); j++) {
					// 这是info节点的数组
					Info info = new Info();
					Element infoElement = (Element) infoNodeList.item(j);
					NodeList infoChildList = infoElement.getChildNodes();
					for (int k = 0; k < infoChildList.getLength(); k++) {
						// 这是info节点的子节点的数组
						Node node = infoChildList.item(k);
						if (node.getNodeType() == Node.ELEMENT_NODE) {
							Element element = (Element) node;
							if (element.getNodeName().equals("docInstId")) {
								info.setDocInstId(element.getTextContent());
							} else if (element.getNodeName().equals("workItemId")) {
								info.setWorkItemId(element.getTextContent());
							} else if (element.getNodeName().equals("title")) {
								info.setTitle(element.getTextContent());
							} else if (element.getNodeName().equals("receive-time")) {
								String time = element.getTextContent();
								info.setReceiveTime(simpleDateFormat.parse(time));
							}else if (element.getNodeName().equals("rank")) {
								info.setRank(element.getTextContent());
							} else if (element.getNodeName().equals("formset-name")) {
								info.setFormsetName(element.getTextContent());
							} else if (element.getNodeName().equals("current-step")) {
								info.setCurrentStep(element.getTextContent());
							} else if (element.getNodeName().equals("complete-time")) {
								String time = element.getTextContent();
								if(time==""){
									info.setCompleteTime(null);
								}else{
									info.setCompleteTime(simpleDateFormat.parse(time));
								}
								
							} 
						}
					}
					infoList.add(info);
				}

				flowInfo.setInfoList(infoList);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		flowInfo.setPageNum(pageNum);
		flowInfo.setPageSize(pageSize);
		return flowInfo;
	}
	
	
		
		public FlowInfo getFlowInfo(String userAccount, int type, int pageNum, int pageSize, String categoryIds ,String formsetIds ) {
			FlowInfo flowInfo = new FlowInfo();
			List<Info> infoList = new ArrayList();
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
			try {

				String flowWService_address = "http://10.40.33.20:9080/flowService/services/flowWService";
				OaWorkFlow flow = new OaWorkFlowLocator(flowWService_address);
				OaWorkFlowSoap flowService = flow.getflowWService();
				String resultXml = flowService.getWaittingInsts(userAccount, type, pageNum, pageSize, "", "");
				System.out.println(resultXml);
				
				DocumentBuilderFactory factory = DocumentBuilderFactory
						.newInstance();
				DocumentBuilder builder = factory.newDocumentBuilder();
				Document document = builder.parse(new InputSource(new StringReader(resultXml)));
				Element root = document.getDocumentElement();
				System.out.println(root.getNodeName());

				//获取ResponseCode节点信息
				NodeList resList = root.getElementsByTagName("ResponseCode");
				Element ResponseCode = (Element)resList.item(0);
				int responseCode = Integer.parseInt(ResponseCode.getTextContent());
				flowInfo.setResponseCode(responseCode);
				
				//获取ResponseText节点信息
				resList = root.getElementsByTagName("ResponseText");
				Element ResponseText = (Element)resList.item(0);
				flowInfo.setResponseText(ResponseText.getTextContent());
				
				if(responseCode!=0)
				{
					// 得到responseData节点
					NodeList nodeList = root.getElementsByTagName("ResponseData");
					Element ResponseData = (Element) nodeList.item(0);

					// 得到info-list节点
					NodeList info_lList = ResponseData
							.getElementsByTagName("info-list");
					Element info_listElement = (Element) info_lList.item(0);

					// 得到info-list的子节点
					NodeList info_ListChild = info_listElement.getChildNodes();

					// 遍历info-list的子节点并把页面信息存入PageInfo类中
					for (int i = 0; i < info_ListChild.getLength(); i++) {
						Node node = info_ListChild.item(i);
						if (node.getNodeType() == Node.ELEMENT_NODE) {
							Element personNode = (Element) node;
							if (personNode.getNodeName().equals("total-page")) {
								flowInfo.setTotalPage(Integer.parseInt(personNode.getTextContent()));
							} else if (personNode.getNodeName().equals(
									"total-record")) {
								flowInfo.setTotalRecord(Integer.parseInt(personNode
										.getTextContent()));
							} else if (personNode.getNodeName().equals("page-num")) {
								flowInfo.setPageNum(Integer.parseInt(personNode
										.getTextContent()));
							} else if (personNode.getNodeName().equals("page-size")) {
								flowInfo.setPageSize(Integer.parseInt(personNode.getTextContent()));
							}
						}
					}

					
					// 读取<info>，并存入pageInfo
					NodeList infoNodeList = info_listElement
							.getElementsByTagName("info");
					for (int j = 0; j < infoNodeList.getLength(); j++) {
						// 这是info节点的数组
						Info info = new Info();
						Element infoElement = (Element) infoNodeList.item(j);
						NodeList infoChildList = infoElement.getChildNodes();
						for (int k = 0; k < infoChildList.getLength(); k++) {
							// 这是info节点的子节点的数组
							Node node = infoChildList.item(k);
							if (node.getNodeType() == Node.ELEMENT_NODE) {
								Element element = (Element) node;
								if (element.getNodeName().equals("docInstId")) {
									info.setDocInstId(element.getTextContent());
								} else if (element.getNodeName().equals("workItemId")) {
									info.setWorkItemId(element.getTextContent());
								} else if (element.getNodeName().equals("title")) {
									info.setTitle(element.getTextContent());
								} else if (element.getNodeName().equals("receive-time")) {
									String time = element.getTextContent();
									info.setReceiveTime(simpleDateFormat.parse(time));
								}else if (element.getNodeName().equals("rank")) {
									info.setRank(element.getTextContent());
								} else if (element.getNodeName().equals("formset-name")) {
									info.setFormsetName(element.getTextContent());
								} else if (element.getNodeName().equals("current-step")) {
									info.setCurrentStep(element.getTextContent());
								} else if (element.getNodeName().equals("complete-time")) {
									String time = element.getTextContent();
									if(time==""){
										info.setCompleteTime(null);
									}else{
										info.setCompleteTime(simpleDateFormat.parse(time));
									}
									
								} 
							}
						}
						infoList.add(info);
					}

					flowInfo.setInfoList(infoList);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			}
				
			return flowInfo;
		}
}
